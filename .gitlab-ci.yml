variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONDEVMODE: "1"
  PIP_ROOT_USER_ACTION: "ignore"

cache:
  paths:
    - "$CI_PROJECT_DIR/.cache/pip"
    - "$CI_PROJECT_DIR/.cache/apt"

# TODO isolate venvs, don't install all locales
test-generic:
  stage: test
  image: python:3
  before_script:
    - 'mkdir -p "$CI_PROJECT_DIR/.cache/apt/partial"'
    - "rm -f /etc/apt/apt.conf.d/docker-clean"
    - 'echo "Dir::Cache::Archives \"$CI_PROJECT_DIR/.cache/apt\";" >> /etc/apt/apt.conf'
    - 'echo "Binary::apt::APT::Keep-Downloaded-Packages \"true\";" >> /etc/apt/apt.conf'
    - 'echo "APT::Install-Recommends \"false\";" >> /etc/apt/apt.conf'

  script: |
    set -eu
    apt update
    apt-get install -y locales-all # for sort-with-numbers
    apt install -y sqlite3 # for *sqlite*
    pip install pytest || exit 1

    err=1
    for f in "$CI_PROJECT_DIR"/*/test.py "$CI_PROJECT_DIR"/*/test.sh
    do
      echo "Testing $f" >&2
      dir=$(dirname "$f")
      cd "$dir"
      if [ -f requirements.txt ]
      then
        pip install -r requirements.txt
      fi >&2
      if grep -q "env pytest" "$f"
      then
        "$f" --junitxml="$CI_PROJECT_DIR/testreport-${dir##*/}".xml >&2 || echo "FAILED for $f"
      else
        "$f" >&2 || echo "FAILED for $f"
      fi
    done | grep FAILED || err=0
    exit $err

  artifacts:
    reports:
      junit: testreport-*.xml

lint-shellcheck:
  stage: test
  image: docker.io/pipelinecomponents/shellcheck
  script: |
    err=1
    set -eu
    grep -r -l '^# shellcheck enable=' "$CI_PROJECT_DIR"/* | while read file
    do
      shellcheck "$file"
    done | grep . || err=0
    exit $err

lint-python:
  stage: test
  image: python:3
  script: |
    err=1
    set -eu
    pip install flake8
    find -name '*.py' -exec flake8 --select E999 '{}' +
    grep -r -l '^#!/usr/bin/env python3' "$CI_PROJECT_DIR"/* | while read file
    do
      flake8 --select E999 "$file"
    done | grep . || err=0
    exit $err
