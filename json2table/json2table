#!/usr/bin/env python3
# SPDX-License-Identifier: WTFPL

"""
Usage:

Print a table of file.json:
    json2table < file.json

Same, but put 'id' and 'name' as first columns:
    json2table id name < file.json
"""

import argparse
from collections import OrderedDict
import prettytable
import json
import sys


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', default='-', help='JSON file to read (standard input by default)')
parser.add_argument('-k', '--keep-only', action='store_const', const=True, help='Keep only specified keys')
parser.add_argument('field', nargs='*', help='display field in the leftmost columns')
args = parser.parse_args()

if args.file == '-':
    fd = sys.stdin
else:
    fd = open(args.file, 'r')

with fd:
    data = json.load(fd, object_pairs_hook=OrderedDict)

if isinstance(data, list) and all(isinstance(obj, dict) for obj in data):
    pass
elif isinstance(data, dict) and all(isinstance(obj, list) for obj in data.values()):
    def get(l, n):
        try:
            return l[n]
        except IndexError:
            return None

    nrows = max(len(v) for v in data.values())
    data = [OrderedDict((k, get(data[k], n)) for k in data) for n in range(nrows)]
else:
    assert False, 'input must be a JSON list of dictionaries or a dictionary with lists'

order = args.field or []
keys = OrderedDict((k, None) for k in order)

if args.keep_only:
    def keep(d):
        return OrderedDict((k, v) for k, v in d.items() if k in keys)
    data = [keep(r) for r in data]
else:
    keys.update((k, None) for d in data for k in d.keys())

keys = list(keys)

table = prettytable.PrettyTable(field_names=keys)
for d in data:
    table.add_row([d.get(k) for k in keys])
print(table)
